#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
# Default mode is to check that checked items pass
MODE="checked"

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
  --mode=checked)
    MODE="checked"
    shift
    ;;
  --mode=unchecked)
    MODE="unchecked"
    shift
    ;;
  *)
    echo "Unknown parameter passed: $1"
    exit 1
    ;;
  esac
done

# Stricter error handling only needed for checked mode during test runs
if [[ "$MODE" == "checked" ]]; then
  trap 'error_handler ${LINENO} $?' ERR
  set -o errtrace -o errexit -o nounset -o pipefail
else
  # Unchecked mode needs nounset and pipefail, but not errexit/errtrace during the loop
  set -o nounset -o pipefail
fi

passing_unchecked_tests=()

# Read the checklist file and process each item based on the mode
while IFS= read -r line; do
  process_line=false
  spec_path=""

  if [[ "$MODE" == "checked" && $line =~ ^-\ \[x\] ]]; then
    process_line=true
    spec_path=$(echo "$line" | awk '{print $3}')
  elif [[ "$MODE" == "unchecked" ]] && grep -Eq '^- \[ \]' <<<"$line"; then
    process_line=true
    spec_path=$(echo "$line" | awk '{print $4}')
  fi

  if [[ "$process_line" == true ]]; then
    echo "Processing spec: $spec_path (Mode: $MODE)"

    initial_test_dirname=$(dirname "$spec_path")
    if [[ "$initial_test_dirname" == "spec" ]]; then
      test_dirname="browser_tests"
    else
      test_dirname="browser_tests/${initial_test_dirname/spec\//}"
    fi
    test_file="test_$(basename "$spec_path" | sed -E 's/\.md$/.py/')"
    test_file_path="${test_dirname}/${test_file}"

    # Run the test file using pytest
    echo "Running test: $test_file_path"
    # Suppress pytest output unless it fails to keep the script output clean
    if pytest -s "$test_file_path" >/dev/null 2>&1; then
      # Test passed
      if [[ "$MODE" == "unchecked" ]]; then
        echo "UNEXPECTED PASS: Test for unchecked item passed: $test_file_path"
        passing_unchecked_tests+=("$test_file_path")
      fi
    else
      # Test failed
      test_exit_code=$?
      if [[ "$MODE" == "checked" ]]; then
        echo "Test failed: $test_file_path (Exit code: $test_exit_code)"
        # Re-run with output for debugging
        pytest -s "$test_file_path"
        exit 1
      else
        # In unchecked mode, failure is expected, continue silently
        echo "Got expected failure for unchecked item: $test_file_path"
      fi
    fi

    # Optional: Extract Cypress test file info if needed later
    cypress_test_file=$(sed -n 's/^..Test source:.. `\([^`]*\)`.*/\1/p' "$spec_path")
    if [[ -n "$cypress_test_file" ]]; then
      echo "cypress_test_file: $cypress_test_file"
      response=$(ca gpro --read "$cypress_test_file" --read "$test_file_path" --read "$spec_path" --no-auto-commits --no-detect-urls --no-gitignore --chat-mode ask --map-tokens 0 -m "does the python playwright test implement all of the same type of logic as the cypress test, with the same basic assertions, or are some missing? if it is good, reply with ELEPHANT. if the playwright test is potentially bad or incomplete, reply with HYENA")

      if grep -Eq ELEPHANT <<<"$response"; then
        echo "Cypress test and Playwright test logic match."
      elif grep -Eq HYENA <<<"$response"; then
        echo "Cypress test and Playwright test logic do not match."
      else
        echo "Unexpected response from ca gpro: $response"
        exit 1
      fi
    fi
  fi
done <checklist.md

# Final summary based on mode
if [[ "$MODE" == "checked" ]]; then
  echo "All checked tests passed successfully."
elif [[ "$MODE" == "unchecked" ]]; then
  if [[ ${#passing_unchecked_tests[@]} -eq 0 ]]; then
    echo "All unchecked tests failed as expected."
  else
    echo "Error: The following unchecked tests passed unexpectedly:"
    for test_path in "${passing_unchecked_tests[@]}"; do
      echo "- $test_path"
    done
    exit 1
  fi
fi
